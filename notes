props are just argument of function
passing a props to component is just like passing argument to functions
prop is a object.
backend data come to us in json form


#react Hooks

(Normal js utility function)
  useState()
  useEffect()

  whenevr a state variable update/change react will re-render code component

if you want to make ur component dynamic if u want something chnage in ur component you should use localstate variable {useState} not just normal variable

rendring based on conditon is known as conditional rendring

e.target.value is the value property of some DOM element, in this case that means the text entered in the search input.

if no dependenchy array then useEffect is called on every render.
  
    .in useEffect , square bracket is called dependency array.

if the dependency array is empty then useEffect called on initial render(just once).

if the dependency array is not empty then useEffect called everytime when depedency changes.

never use useState in condition . --like inside if else,for loop ,functions etc....use useState on top after component.


React.lazy and Suspense: These features enable lazy loading of components, which means that only the components needed for the initial render are loaded first, and additional components are loaded on demand. This reduces the initial load time and improves the application's performance.

_______________--

higher order componnet is a component that takes a component and returns a component,means it takes a existing component and enhance/modify it and then returns it.

higher order functions are pure function...pure function means

if a component is controlled by its parent it is called controlled component..
as we know every component has its own state..if you want to check then go to the broser add extension react developer tool then go to >> this section u will find coponent section.
     
     there is something knows as props drilling that means problem with props thats why we use useContext react hook.

only the data u use multiple places then use useContext, u can use useContext data anywhere u want.

# Redux -- Redux and React are different libraries
    Redux offers easy debugging